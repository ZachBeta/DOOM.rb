{
  "version": 1,
  "rules": [
    {
      "name": "Self-Healing Rules",
      "description": "Ensure cursor rules evolve with the project",
      "patterns": [
        {
          "pattern": "\\.cursor/rules\\.json$|WORKLOGS\\.md$",
          "instructions": "These rules should evolve as the project evolves. When implementing new features or refactoring code, consider if the cursor rules need updating to reflect new patterns or best practices. Suggest rule updates when appropriate based on the current state of the project. Periodically review rules for relevance and accuracy."
        }
      ]
    },
    {
      "name": "Ruby Style Guide",
      "description": "Follow Sandi Metz's POODR principles for Ruby code",
      "patterns": [
        {
          "pattern": "\\.rb$",
          "instructions": "Write Ruby code following Practical Object-Oriented Design principles by Sandi Metz. Focus on single responsibility, dependency injection, and composition over inheritance. Keep classes small and focused with clear public interfaces. If you notice code that doesn't follow these principles, suggest refactoring."
        }
      ]
    },
    {
      "name": "Minimal Token Usage",
      "description": "Keep explanations concise to save tokens",
      "patterns": [
        {
          "pattern": ".*",
          "instructions": "Keep explanations and follow-up questions to a minimum to save tokens. Focus on delivering working code with just enough context. If responses become too verbose, suggest ways to be more concise."
        }
      ]
    },
    {
      "name": "Test-Driven Development",
      "description": "Encourage TDD practices with real objects",
      "patterns": [
        {
          "pattern": "_test\\.rb$",
          "instructions": "Write Minitest tests that focus on behavior rather than implementation details. Follow the Arrange-Act-Assert pattern. Use real objects instead of mocks - create simple test-specific implementations that implement just the interface needed. Keep test objects in the same file as the tests that use them. Ensure tests are isolated and don't depend on each other."
        }
      ]
    },
    {
      "name": "Completion Requirements",
      "description": "Requirements before marking tasks as completed",
      "patterns": [
        {
          "pattern": "WORKLOGS\\.md$",
          "instructions": "Before marking any task as completed in WORKLOGS.md, follow these steps in order: 1) All automated tests must pass (`rake test`), 2) The code must follow project style guidelines, 3) Review and update cursor rules to reflect any new patterns or practices, and 4) FINAL STEP: Manually test the feature with `rake doom` to verify it works as expected in the actual game. Only after successful completion of ALL steps, with special emphasis on the final manual verification, should WORKLOGS.md be updated."
        }
      ]
    },
    {
      "name": "Documentation",
      "description": "Document code appropriately",
      "patterns": [
        {
          "pattern": "\\.rb$|\\.md$",
          "instructions": "Document public interfaces clearly but avoid excessive comments in implementation code. Let well-named methods and variables speak for themselves."
        }
      ]
    },
    {
      "name": "Game Architecture",
      "description": "Maintain clean game architecture",
      "patterns": [
        {
          "pattern": "lib/doom/.*\\.rb$",
          "instructions": "Maintain separation of concerns between game components. Keep rendering logic separate from game logic. Use composition over inheritance. Follow the Single Responsibility Principle. Prefer small, focused classes with clear public interfaces."
        }
      ]
    },
    {
      "name": "Performance Considerations",
      "description": "Keep performance in mind for game code",
      "patterns": [
        {
          "pattern": "renderer\\.rb$|ray.*\\.rb$",
          "instructions": "Be mindful of performance in rendering and physics code. Avoid unnecessary object creation in tight loops. Consider using memoization or caching for expensive calculations. Use profiling to identify bottlenecks."
        }
      ]
    },
    {
      "name": "Logging Best Practices",
      "description": "Use logging effectively",
      "patterns": [
        {
          "pattern": "logger\\.rb$|.*\\.rb$",
          "instructions": "Use appropriate log levels: debug for detailed development info (goes to debug.log), info/warn/error/fatal for important game events (goes to game.log). Keep debug logs verbose for development but keep game.log clean. Log important state changes and errors in game.log, detailed debugging info in debug.log. Consider log levels when adding new logging statements."
        }
      ]
    },
    {
      "name": "Collision Detection",
      "description": "Guidelines for implementing collision detection",
      "patterns": [
        {
          "pattern": "player\\.rb$|movement\\.rb$|collision.*\\.rb$",
          "instructions": "Implement collision detection using simple geometric calculations. Consider using a grid-based approach for efficiency. Separate collision detection logic from movement logic."
        }
      ]
    },
    {
      "name": "Texture Mapping",
      "description": "Guidelines for implementing texture mapping",
      "patterns": [
        {
          "pattern": "renderer\\.rb$|texture.*\\.rb$|wall.*\\.rb$",
          "instructions": "Implement texture mapping by calculating texture coordinates based on wall hit positions. Use efficient texture lookup methods. Consider caching textures for performance."
        }
      ]
    },
    {
      "name": "WAD File Parsing",
      "description": "Guidelines for implementing WAD file parsing",
      "patterns": [
        {
          "pattern": "wad.*\\.rb$|parser.*\\.rb$",
          "instructions": "Implement WAD file parsing using a clean, modular approach. Separate concerns between file I/O, data structure parsing, and game object creation. Use streaming approaches for large files."
        }
      ]
    },
    {
      "name": "Project Evolution Tracking",
      "description": "Track project evolution and update rules accordingly",
      "patterns": [
        {
          "pattern": "WORKLOGS\\.md$|README\\.md$",
          "instructions": "Monitor project progress through WORKLOGS.md and README.md. When new features are completed or planned, suggest updates to cursor rules that would help with implementing those features. Ensure rules stay aligned with the current project priorities."
        }
      ]
    },
    {
      "name": "Self-Documenting Code",
      "description": "Prefer explanatory code and tests over comments",
      "patterns": [
        {
          "pattern": "\\.rb$",
          "instructions": "Write self-documenting code using clear method and variable names. Use test cases to document behavior. Only add comments for complex algorithms or when the code cannot be made more clear through refactoring. Extract complex logic into well-named methods. Use test cases to demonstrate usage and edge cases."
        }
      ]
    },
    {
      "name": "Performance Monitoring",
      "description": "Guidelines for implementing performance monitoring",
      "patterns": [
        {
          "pattern": "fps.*\\.rb$|performance.*\\.rb$",
          "instructions": "Implement performance monitoring with minimal overhead. Use efficient time calculations. Consider frame timing, frame rate smoothing, and performance metrics collection. Log performance data at appropriate intervals."
        }
      ]
    },
    {
      "name": "Developer Console",
      "description": "Guidelines for implementing the developer console",
      "patterns": [
        {
          "pattern": "console.*\\.rb$|command.*\\.rb$",
          "instructions": "Implement developer console using command pattern. Keep console rendering efficient. Support command history, auto-completion, and clear error handling. Make console toggleable and non-intrusive."
        }
      ]
    }
  ]
} 